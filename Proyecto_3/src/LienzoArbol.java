
import java.awt.Color;
import java.awt.Graphics;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Jegor
 * Quien no sabe lo que busca no entiende lo que encuentra...
 */
// Se define la clase LienzoArbol que hereda de JPanel y se encargará de dibujar el árbol binario en pantalla.
public class LienzoArbol extends javax.swing.JPanel {

    /**
     * Creates new form LienzoArbol
     */
    // Inicio o raíz del árbol a visualizar.
    private NodoArbol<Tarjeta> raiz;

    public LienzoArbol(NodoArbol<Tarjeta> raiz) {
        this.raiz = raiz;
    }

    // Método sobrescrito del JPanel. Se encarga de dibujar el componente cada vez que es necesario refrescar la pantalla.
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); // Se asegura de limpiar el panel antes de redibujar, evitando trazos anteriores.

        if (raiz != null) {
            // Comienza a dibujar desde el centro del panel, a una altura inicial de 40 píxeles.
            // El offset define la separación horizontal entre nodos, iniciando con un valor 
            // proporcional al ancho del panel.
            dibujarNodo(g, raiz, getWidth() / 2, 40, getWidth() / 4);
        }
    }

    // Método recursivo que se encarga de dibujar un nodo y sus respectivos hijos.
    // Recibe el objeto Graphics, el nodo actual, sus coordenadas (x, y) y el offset que determina 
    // el espaciado entre nodos en cada nivel.
    private void dibujarNodo(Graphics g, NodoArbol<Tarjeta> nodo, int x, int y, int offset) {
        // Se define el color del nodo y se dibuja un círculo centrado en las coordenadas (x, y).
        g.setColor(Color.GRAY);
        g.fillOval(x - 15, y - 15, 30, 30); // Círculo de 30x30 px, centrado en (x, y).

        // Se cambia el color para escribir el ID del nodo dentro del círculo.
        g.setColor(Color.MAGENTA);
        g.drawString(String.valueOf(nodo.getDato().getId()), x - 7, y + 5); // Ajuste visual para centrar el texto.

        // Si el nodo tiene hijo izquierdo, se dibuja una línea que conecta el nodo actual con su hijo.
        if (nodo.getIzquierdo() != null) {
            g.setColor(Color.BLACK);
            // Línea desde el centro del nodo actual hacia donde se ubicará el nodo hijo izquierdo.
            g.drawLine(x, y, x - offset, y + 50);

            // Llamada recursiva para dibujar el nodo hijo izquierdo, con una nueva posición más abajo y a la izquierda.
            dibujarNodo(g, nodo.getIzquierdo(), x - offset, y + 50, offset / 2);
        }

        // Si el nodo tiene hijo derecho, se realiza el mismo procedimiento hacia la derecha.
        if (nodo.getDerecho() != null) {
            g.setColor(Color.BLACK);
            g.drawLine(x, y, x + offset, y + 50); // Línea hacia la derecha y más abajo.
            dibujarNodo(g, nodo.getDerecho(), x + offset, y + 50, offset / 2); // Llamada recursiva hacia el hijo derecho.
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 681, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 385, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
